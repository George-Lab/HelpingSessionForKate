1) Контейнеры типа множества и отображнеия - это Ассоциативные контейнеры, т.е. контейнерные классы, которые автоматически сортируют все свои элементы. 
По умолчанию ассоциативные контейнеры выполняют сортировку элементов, используя оператор сравнения <. 
std::map (или «ассоциативный массив») — это set, в котором каждый элемент является парой «ключ-значение». 
«Ключ» используется для сортировки и индексации данных и должен быть уникальным, а «значение» — это фактические данные.
Пример использования - создание словаря.
Set — это контейнер C++ STL, используемый для хранения уникальных элементов, и все элементы хранятся в отсортированном виде. 
После того как значение сохранено в наборе, его нельзя изменить внутри набора, вместо этого мы можем удалить это значение и добавить измененное значение элемента.

2) - Для хорошей хеш-функции одно и то же сообщение приводит к одному и тому же хеш-значению
- значение хеш-функции можно вычислить за приемлемое время
- невозможно за адекватное время найти последовательность символов, которое дает заданное хеш-значение, даже если известны хеш и сама хеш-функция
- невозможно найти две различные последовательности символов с одинаковым хеш-значением
- любое изменение в хешируемой последовательности символо изменяет хеш настолько сильно, что новое и старое значения кажутся некоррелирующими

3) Коллизия хеш-функции — это когда у двух разных входных последовательностей символов хеш получается одинаковым.
Коллизии не являются нормой и от них стремятся избавлятся, тем не менее при работе с большим количество данных - большими таблицами
хеширования, то возникновение коллизий неизбежно. Некоторые алгоритмы хеширования вообще требуют наличия коллизий
Методы борьбы с коллизиями: - "Salt" хеш - добавление к хешируемой последовательности символов дополнительной последовательности
"лишних" символов. 
-Одновременное использование двух разных алгоритмов хеширования.

4) хеш-таблица - эффективная структура данных для реализации словарей, а именно, она позволяет хранить пары (ключ, значение) 
и выполнять три операции: операцию добавления новой пары, операцию поиска и операцию удаления пары по ключу.
На поиск элемента в Хеш-таблице может понадобится столько же времени как и в списке - O(1)

5) Контейнеры Boost.multiindex позволяют определять контейнеры с поддержкой произвольного количества интерфейсов. Например, с Boost.Multiindex
 можно определить контейнер, поддерживающий интерфейс для прямого доступа к элементам с индексом и интерфейс для сортировки элементов. Т.е. 
 одновременно использовать интерфейсы std::vector и std::set
